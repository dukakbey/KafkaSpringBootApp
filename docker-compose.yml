version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-1:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka-1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    healthcheck:
      test: "/usr/bin/kafka-topics --list --zookeeper zookeeper:2181"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Auto-create topics enabled

  kafka-2:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka-2
    depends_on:
      - zookeeper
    ports:
      - 9093:9093
    healthcheck:
      test: "/usr/bin/kafka-topics --list --zookeeper zookeeper:2181"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Auto-create topics enabled
  
  kafka-topics:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka-topics
    depends_on:
      kafka-1:
        condition: service_healthy
    command: "bash -c 'echo creating topics && \
      kafka-topics --bootstrap-server kafka-1:9092 --create --topic customer_data && \
      kafka-topics --bootstrap-server kafka-1:9092 --create --topic customer_analysis_topic && \
      tail -f /dev/null'"  # Bu komut konteyneri sürekli çalışır tutar
    healthcheck:
      test: "kafka-topics --bootstrap-server kafka-1:9092 --list | grep customer_data"
      interval: 10s
      timeout: 5s
      retries: 5



  spring-kafka-sender:
    #image: dukakbey/spring-kafka:sender
    build:        
      context: ./kafka-data-sender
      dockerfile: Dockerfile
    image: dukakbey/spring-kafka:sender
    container_name: "spring-kafka-sender"
    depends_on:
      - kafka-1
    ports:
      - 8081:8081
  
  spring-kafka-receiver:
    #image: dukakbey/spring-kafka:receiver
    build:       
      context: ./kafka-data-receiver
      dockerfile: Dockerfile
    image: dukakbey/spring-kafka:receiver
    container_name: "spring-kafka-receiver"
    depends_on:
      - kafka-1
    ports:
      - 8080:8080
  
  spring-kafka-streams: 
    build:       
      context: ./spring-kafka-streams
      dockerfile: Dockerfile
    image: dukakbey/spring-kafka:streamer
    container_name: "spring-kafka-streams"
    depends_on:     
      kafka-topics:
        condition: service_healthy  
    ports:
      - 9082:9082
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    depends_on:
      - kafka-1
      - kafka-2
      
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:9092,kafka-2:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
